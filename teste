/**
* This file should be placed at the node_modules sub-directory of the directory where you're 
* executing it.
* 
* Written by Fernando Castor in November/2017. 
*/
//indice dos assignments
let indiceAssignment = 0


exports.solve = function (fileName) {
  let formula = readFormula(fileName)
  let result = doSolve(formula.clauses, formula.variables)
  return result // two fields: isSat and satisfyingAssignment
}

// Receives the current assignment and produces the next one

//funcao e auxiliar que pega todas as combinações de false e true

//console.log(teste)
let test = readFormula('simple2.cnf')
let variaveisNulas = test.variables
let allAssignments = assignments(variaveisNulas)
let result = doSolve(test.clauses, test.variables)
//console.log(allAssignments)
function assignments(arrayVariaveis) {
  let assignments = []
  let stringConcat = ""
  for (let x = arrayVariaveis.length - 1; x >= 0; x--) {
    if (arrayVariaveis[x] == 0) {
      arrayVariaveis[x] = 1
      for (let y = x + 1; y <= arrayVariaveis.length - 1; y++) {
        if (arrayVariaveis[y] == 1) {
          arrayVariaveis[y] = 0
          x = arrayVariaveis.length
        }
      }
      stringConcat = stringConcat + " " + arrayVariaveis
    }
  }
  assignments = stringConcat.split(" ")
  assignments.shift()
  for (let i = 0; i < assignments.length; i++) {
    assignments[i] = assignments[i].split(',')
  }
  //console.log(assignments)
  return assignments
}

//indice do array de assinaturas
//cada vez que for chamada, chama uma posicao do array de ass.
function nextAssignment(currentAssignment) {
  // implement here the code to produce the next assignment based on currentAssignment.
  let newAssignment = allAssignments[indiceAssignment]
  indiceAssignment++
  return newAssignment
}

function doSolve(clauses, assignment) {
  let isSat = false
  //a quantidade total de assignments
  let maximo = Math.pow(2, assignment.length)
  let quantidadeTotal = maximo
  let contador = 1
  console.log("Serão feitas " + quantidadeTotal + " verificações")
  while ((!isSat) && maximo > 0) {
    let clausulasVerdadeiras = 0
    for (let i = 0; i < clauses.length; i++) {
      let clausulaAtual = clauses[i]
      let verificacao = false
      for (let j = 0; !verificacao && j < clausulaAtual.length; j++) {
        if (clausulaAtual >= 0) {
          if (assignment[clausulaAtual[j] - 1] == 1) {
            verificacao = true
          }
        } else {
          if (assignment[Math.abs(clausulaAtual[j]) - 1] == 0) {
            verificacao = true
          }
        }
      }
      if(verificacao){
        clausulasVerdadeiras++
      }
    }
    if(clausulasVerdadeiras == clauses.length){
      console.log("Verificação " + contador + " de " + quantidadeTotal)
      console.log("É satisfativel no assignment :")
      console.log(assignment)
      isSat = true
    } else {
      console.log("Verificação " + contador + " de " + quantidadeTotal)
      assignment = nextAssignment(assignment);
      maximo--
      contador++
    }
  }
  let result = { 'isSat': isSat, satisfyingAssignment: null }
  if (isSat) {
    result.satisfyingAssignment = assignment
  }
  return result
}
//readFormula("simple0.cnf")
function readFormula(fileName) {
  // To read the file, it is possible to use the 'fs' module. 
  const fs = require('fs')
  // Use function readFileSync and not readFile. 
  // First read the lines of text of the file and only afterward use the auxiliary functions.

  //pega o arquivo e transforma em um array cortando nas quebras de linhas
  let text = fs.readFileSync(fileName, 'utf8').split(/[\r\n]+/) // = ...  //  an array containing lines of text extracted from the file. 
  let semcoments = ''
  let array1 = []
  let array2 = []
  let numeroVariaveis = ''
  let numeroClausulas = ''
  for (let i = 0; i < text.length; i++) {
    //pegando o numero de clausulas e variaveis na linha ''p''
    if (text[i].charAt(0) == 'p') {
      //teste = text[i].match(/\d/g)
      numeroVariaveis = text[i].split(' ')[3]
      numeroClausulas = text[i].split(' ')[2]
    }
    //retirando as linhas que começam com p ou c
    if (text[i].charAt(0) == 'c' || text[i].charAt(0) == 'p') {
      text[i] = ''
    }
    //concatenando em uma string os elementos do array para juntar as linhas
    if (typeof text[i] != typeof '-' + '1') {
      semcoments = semcoments + ' ' + text[i]
    }
    else {
      semcoments = semcoments + text[i]
    }
  }
  //criando um novo array bidimensional cortando nos zeros e nos espaços
  let arrayClausulas = semcoments.split(' 0')
  for (let i = 0; i < arrayClausulas.length; i++) {
    arrayClausulas[i] = arrayClausulas[i].split(' ')
  }
  //gambiarra para fazer funcionar
  for (let i = 0; i < arrayClausulas.length; i++) {
    for (let j = 0; j < arrayClausulas[i].length; j++) {
      if (arrayClausulas[i][j] != '') {
        array1.push(arrayClausulas[i][j])
      }
    }

    array2.push(array1)
    array1 = []

  }
  array2.pop();


  //construir o array das variaveis:
  let variaveis = readVariables(array2).sort()
  let clausulas = array2


  // In the following line, text is passed as an argument so that the function
  // is able to extract the problem specification.
  let specOk = checkProblemSpecification(numeroClausulas, numeroVariaveis, clausulas, variaveis)

  let result = { 'clauses': [], 'variables': [] }
  if (specOk) {
    result.clauses = clausulas
    result.variables = variaveis.fill(0)
  }
  return result
}
//funcao que retorna um array com todas as variaveis
function readVariables(clauses) {
  let arrayVariaveisTest = []
  for (let i = 0; i < clauses.length; i++) {
    for (let j = 0; j < clauses[i].length; j++) {

      if (!arrayVariaveisTest.includes(Math.abs(clauses[i][j]))) {
        arrayVariaveisTest.push(Math.abs(clauses[i][j]))
      }
    }
  }
  return arrayVariaveisTest
}


function checkProblemSpecification(clausulasNumero, variaveisNumero, clausulas, variaveis) {
  if (clausulas.length != clausulasNumero || variaveis.length != variaveisNumero) {
    return false
  } else {
    return true
  }
}

